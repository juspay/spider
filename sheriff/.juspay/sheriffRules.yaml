rules: 
  - ruleName: "GeneralRuleTest"
    conditions:
      - fnName: "pack"
        isQualified: false
        argNo: 0
        action: "Blocked"
        argTypes: []
        argFns: []
        suggestedFixes: ["Remove `pack` function call from the error location."]
    ruleInfo: 
        fnName: "show"
        isQualified: false
        argNo: 1
        action: "Blocked"
        argTypes: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
        argFns: []
        suggestedFixes: ["Remove `show` function call from the error location. If quotes are required, manually add them to the text.","You might want to use a convertor function like `Data.Text.pack`, `Data.Text.unpack`, `decodeUtf8`, `encodeUtf8`, etc."]
  
  # - fn_rule_name: "ShowRule"
  #   fn_name: "show"
  #   arg_no: 1
  #   fns_blocked_in_arg: []
  #   types_blocked_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
  #   types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
  #   fn_rule_fixes: ["Remove `show` function call from the error location. If quotes are required, manually add them to the text.","You might want to use a convertor function like `Data.Text.pack`, `Data.Text.unpack`, `decodeUtf8`, `encodeUtf8`, etc."]
  #   fn_rule_exceptions: []
  #   fn_rule_ignore_modules: []

  # - db_rule_name: "DBRuleTest"
  #   table_name: "TxnRiskCheck"
  #   indexed_cols_names: 
  #     - partitionKey
  #     - and:
  #       - txnId
  #       - customerId
  #   db_rule_fixes: ["You might want to include an indexed column in the `where` clause of the query."]
  #   db_rule_exceptions: []

  - fn_rule_name: "LogRule"
    fn_name: "logErrorT"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logErrorV"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logError"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logInfoT"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logInfoV"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logInfo"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logDebugT"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logDebugV"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logDebug"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logErrorWithCategoryT"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logErrorWithCategoryV"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "logErrorWithCategory"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []
  
  - fn_rule_name: "LogRule"
    fn_name: "forkErrorLog"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []
  
  - fn_rule_name: "LogRule"
    fn_name: "forkInfoLog"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: "debugLog"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []
  
  - fn_rule_name: "LogRule"
    fn_name: "warnLog"
    arg_no: 2
    fns_blocked_in_arg: [["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]], ["encode", 1, []], ["encodeJSON", 1, []]]
    types_blocked_in_arg: []
    types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
    fn_rule_fixes: ["Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module.", "Make sure that there is `ToJSON` instance on the value we are logging.", "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"]
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []