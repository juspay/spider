rules: 
  - ruleName: GeneralRuleTest
    conditions:
      - fnName: pack
        isQualified: false
        argNo: 0
        action: Blocked
        argTypes: []
        argFns: []
        suggestedFixes:
          - Remove `pack` function call from the error location.
    ruleInfo: 
        fnName: show
        isQualified: false
        argNo: 1
        action: Blocked
        argTypes:
          - Text
          - String
          - Char
          - "[Char]"
          - Maybe
          - "(,)"
          - "[]"
        argFns: []
        suggestedFixes:
          - Remove `show` function call from the error location. If quotes are required, manually add them to the text.
          - You might want to use a convertor function like `Data.Text.pack`, `Data.Text.unpack`, `decodeUtf8`, `encodeUtf8`, etc.
  
  # - fn_rule_name: "ShowRule"
  #   fn_name: "show"
  #   arg_no: 1
  #   fns_blocked_in_arg: []
  #   types_blocked_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
  #   types_to_check_in_arg: ["Text", "String", "Char", "[Char]", "Maybe", "(,)", "[]"]
  #   fn_rule_fixes: ["Remove `show` function call from the error location. If quotes are required, manually add them to the text.","You might want to use a convertor function like `Data.Text.pack`, `Data.Text.unpack`, `decodeUtf8`, `encodeUtf8`, etc."]
  #   fn_rule_exceptions: []
  #   fn_rule_ignore_modules: []

  - fn_rule_name: "LogRule"
    fn_name: 
      - "logErrorT"
      - "logErrorV"
      - "logError"
      - "logDebugT"
      - "logDebugV"
      - "logDebug"
      - "logInfoT"
      - "logInfoV"
      - "logInfo"
      - "logErrorWithCategoryT"
      - "logErrorWithCategoryV"
      - "logErrorWithCategory"
      - "logWarningT"
      - "logWarningV"
      - "logWarning"
      - "forkErrorLog"
      - "forkInfoLog"
      - "debugLog"
      - "warnLog"
      - "logDecryptedResponse"
      - "logDecryptedRequest"
    arg_no: 2
    fns_blocked_in_arg: 
      - ["show", 1, ["EnumTypes", "Integer", "Double", "Float", "Int64", "Int", "Bool", "Number", "(,)", "[]", "Maybe"]]
      - ["encode", 1, []]
      - ["encodeJSON", 1, []]
    types_blocked_in_arg: []
    types_to_check_in_arg: 
      - "Text"
      - "String"
      - "Char"
      - "[Char]"
      - "Maybe"
      - "(,)"
      - "[]"
    fn_rule_fixes:
      - "Remove `show` function call from the error location and use `L.logErrorV @Text` or `L.logDebugV @Text` or `L.logInfoV @Text` function(s) imported from `EulerHS.Language` module."
      - "Make sure that there is `ToJSON` instance on the value we are logging."
      - "You may use tuples for combining string and objects. For e.g., (\"Failed to fetch object: \" :: Text, obj)"
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []

  - fn_rule_name: "ART KVDB Rule"
    fn_name: "runKVDB"
    arg_no: 0
    fns_blocked_in_arg: []
    types_blocked_in_arg: []
    types_to_check_in_arg: []
    fn_rule_fixes:
      - "You might want to use some other wrapper function from `EulerHS.Extra.Redis` module."
      - "For e.g. - rExists, rDel, rGet, rExpire, etc."
    fn_rule_exceptions: []
    fn_rule_ignore_modules:
      - "EulerHS.Extra.Redis"
      - "EulerHS.Framework.Interpreter"
      - "EulerHS.Framework.Language"
      - "EulerHS.KVDB.Interpreter"
      - "KVDB.KVDBSpec"
    
  - fn_rule_name: Test Qualified Function Name Rule
    fn_name: TestUtils.throwException
    arg_no: 0
    fns_blocked_in_arg: []
    types_blocked_in_arg: []
    types_to_check_in_arg: []
    fn_rule_fixes:
      - You are not allowed to use helper function `throwException` from `TestUtils` module.
      - Use `throwExceptionV2` or `throwExceptionV4` function from `TestUtils` module.
    fn_rule_exceptions: []
    fn_rule_ignore_modules:
      - TestUtils

  - fn_rule_name: Test Multiple Function Names in Single Rule
    fn_name: 
      - TestUtils.throwExceptionV2
      - TestUtils.throwExceptionV4
    arg_no: 0
    fns_blocked_in_arg: []
    types_blocked_in_arg: []
    types_to_check_in_arg: []
    fn_rule_fixes:
      - You are not allowed to use helper function `throwException` from `TestUtils` module.
      - Use `throwExceptionV2` or `throwExceptionV4` function from `TestUtils` module.
    fn_rule_exceptions: []
    fn_rule_ignore_modules:
      - TestUtils
      - Exceptions

  # We should get the errors for below functions two times only in Test1
  - fn_rule_name: Test Allowed Modules
    fn_name:
      - throwExceptionV2
      - TestUtils.throwExceptionV4
    arg_no: 0
    fns_blocked_in_arg: []
    types_blocked_in_arg: []
    types_to_check_in_arg: []
    fn_rule_fixes:
      - Check Allowed Modules
      - You are not allowed to use helper function `throwException` from `TestUtils` module.
      - Use `throwExceptionV2` or `throwExceptionV4` function from `TestUtils` module.
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []
    fn_rule_check_modules:
      - SubTests.FunctionUseTest
    
  # We should get error for usage of any function with Number type
  - fn_rule_name: Test Functions usage blocked having any function name with given signature
    fn_name:
      - "*"
    arg_no: 0
    fn_sigs_blocked:
      - Number -> TestUtils1.Number -> *
      - Number -> Number -> Number
      - TestUtils.Number -> TestUtils.Number -> TestUtils.Number
      - Maybe (Either (Maybe (Int)) (Maybe (Int))) -> Number -> Number -> Number
    fns_blocked_in_arg: []
    types_blocked_in_arg: []
    types_to_check_in_arg: []
    fn_rule_fixes:
      - Contact senior dev for the solution.
    fn_rule_exceptions: []
    fn_rule_ignore_modules: []
    fn_rule_check_modules:
      - Test1
      - SubTests.FunctionUseTest

  # We should get error for any infinite recursion cases
  - infinite_recursion_rule_name: Infinite Recursions
    infinite_recursion_rule_fixes:
      - "Remove the infinite recursion."
      - "Add a base case check."
      - "Pass the modified value to function arguments."
    infinite_recursion_rule_ignore_functions:
      - Exceptions.pattern6

  - db_rule_name: "DBRuleTest"
    table_name: "Table1"
    indexed_cols_names: 
      - partitionKey
      - id
      - and:
        - customerPhone
        - customerEmail
    db_rule_fixes: 
      - "You might want to include an indexed column in the `where` clause of the query."
    db_rule_exceptions: []

  - where_clause_rule_name: "DefaultWhereClauseRule"
    where_clause_rule_fixes: 
      - "You might want to include a mandatory column in the `where` clause of the query."
    where_clause_rule_ignore_modules: []
    where_clause_rule_check_modules:
      - "*"
    query_functions_to_check: 
      - findOneRow
      - findOne
      - findAll
      - findAllRows
      - findAllRowsWithLimit
      - findAllWithLimit
      - findAllWithLimitAndOffset